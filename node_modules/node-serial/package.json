{
  "name": "node-serial",
  "version": "0.1.1",
  "description": "A simple module for working with serial callbacks, works on node and browser",
  "main": "index.js",
  "scripts": {
    "test": "make test-coveralls"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chemzqm/serial.git"
  },
  "keywords": [
    "serial",
    "async"
  ],
  "author": {
    "name": "chemzqm@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/chemzqm/serial/issues"
  },
  "devDependencies": {
    "chai": "~1.8.0",
    "mocha": "~1.15.1",
    "mocha-lcov-reporter": "0.0.1",
    "istanbul": "~0.1.46",
    "coveralls": "~2.6.0"
  },
  "dependencies": {
    "next-tick": "~0.1.0"
  },
  "readme": "[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/chemzqm/serial/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n[![Build Status](https://secure.travis-ci.org/chemzqm/serial.png)](http://travis-ci.org/chemzqm/serial)\n[![Coverage Status](https://coveralls.io/repos/chemzqm/serial/badge.png?branch=master)](https://coveralls.io/r/chemzqm/serial?branch=master)\n\n# Serial\n\nSerial provide a simple way for management of serial async call, so you can remember the API just by a glance.\n\nIf you think [async](https://github.com/caolan/async) and [promise](https://github.com/then/promise) is somehow complecated, consider to use [chemzqm/parallel](https://github.com/chemzqm/parallel) and [chemzqm/serial](https://github.com/chemzqm/serial) to make your life easier.\n\n## Installation\n\nVia npm:\n\n    npm install node-serial\n\nVia [component](https://github.com/component/component):\n\n    component install chemzqm/serial\n\n## Features\n\n* Unified error handling.\n* Timeout support for individual callback.\n* Immediate finished when error occur.\n* Get previous callback result through `ctx.res`.\n* Save and get properties on `ctx` object.\n* No magic on finished callback, just one function.\n\n## Test on node and browser\n\nYou must have `component` installed for browser usage and `mocha`, `mocha-phantomjs` installed for testing.\n\n``` bash\n$ npm install -g component mocha mocha-phantomjs\n$ git clone git@github.com:chemzqm/serial.git\n$ cd serial && npm install\n$ make\n#run test on server side\n$ make test\n#run test on phantomjs\n$ make phantomjs\n```\n\n## Example\n\n``` js\nfunction square(n, done) {\n  setTimeout(function(){\n    done(null, n * n);\n  }, 100);\n}\nvar Serial = reuiqre('serial'); //The name is 'node-serial' in node environment\nvar serial = new Serial();\nserial.timeout(1000);\n[1, 2, 3].forEach(function(){\n  serial.add(function(done, ctx){\n    square( 1 + (ctx.res || 0), function (err ,res) {\n      done(err, res);\n    })\n  })\n})\nserial.done(function (err, ctx) {\n  if (err) throw err;\n  // ctx.res => 25\n});\n```\n\n## API\n\n### Serial()\n\nInit new Serial instance.\n\n### .timeout(Number)\n\nSet the timeout to number `ms`, default is `10s`.\n\n**Note** this timeout if for individual callback function.\n\n### .add(Function)\n\nAdd Function to serial, the first argument is a callback function, it should be called with `error` as first argument and result you need as secound argument. the secound argument is a `ctx` obejct, it's `res` attribute contains the result of the previous function call, you can save any object on `ctx` as you need.\n\n### .done(Function)\n\nThe callback function is called with `error` (null or undefined if not exist) and the result array when all the request get finished (or timeout reached).\n\n**Note**, this function should only be called once.\n\n## License\n\n  MIT\n\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/chemzqm/serial",
  "_id": "node-serial@0.1.1",
  "dist": {
    "shasum": "3766fa9614c20c6f27d3713f9bd8c56747fbb8c9"
  },
  "_from": "node-serial@",
  "_resolved": "https://registry.npmjs.org/node-serial/-/node-serial-0.1.1.tgz"
}
